"""
Django settings for TechFactory project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path

# --- ⬇️ AÑADIDOS PARA DEPLOY (sin tocar tu config actual) ⬇️ ---
# Estos ajustes solo se activan cuando corres en Render u otro entorno
# donde definas RENDER=1 (o puedes usar cualquier variable que prefieras).




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#d@7q9_8#b_p80t(ij4$1-t=xk^^tnp&uk#nf3jq=lh@#xx_+j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
    'impresoras',  # Asegúrate de que tu app de impresoras esté aquí
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'base.middleware.SingleLoginRequiredMiddleware',
]

ROOT_URLCONF = 'TechFactory.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TechFactory.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MASTER_PASSWORD = 'TechFactory2025'  # Password for clearing all records

USE_TZ = True
TIME_ZONE = 'America/Guayaquil'  # o la tuya

# Credenciales únicas (como definimos antes)
SINGLE_USER_USERNAME = "techfactory"
SINGLE_USER_PASSWORD = "12345"

# Excepciones de login por nombre de ruta (namespace:name)

LOGIN_EXEMPT_URLS = {
     # landing pública
    "landing", "base:landing",

    # login/logout
    "login", "base:login",
    "logout", "base:logout",
    "admin:login", "admin:logout",
    # impresoras públicas
    'impresoras:calendario',
    'impresoras:crear_reserva',
    'impresoras:marcar_usado',
    'impresoras:cancelar',
    'impresoras:exportar_excel',
}

# Middleware: agrega el nuestro después de AuthenticationMiddleware y SessionMiddleware
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# (opcional) sesión de 8h
SESSION_COOKIE_AGE = 8 * 60 * 60

# STATIC/MEDIA (si no los tienes ya)
STATIC_URL = "/static/"
MEDIA_URL  = "/media/"
# settings.py
LOGIN_EXEMPT_URLS = {
    "base:login",
    "base:logout",
    # opcional: "admin:index",
}

# Si llegaste a usar LOGIN_URL:
LOGIN_URL = "base:login"
LOGIN_REDIRECT_URL = 'base:index'
LOGOUT_REDIRECT_URL = 'base:landing'
STATIC_ROOT = BASE_DIR / "staticfiles"

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# --- AÑADIDOS PARA DEPLOY EN RENDER (colocar al FINAL del archivo) ---
import os
import dj_database_url

if os.getenv("RENDER") == "1":
    # DEBUG y hosts
    DEBUG = os.getenv("DEBUG", "False") == "True"

    # ALLOWED_HOSTS: no pisamos lo que ya tienes; solo añadimos comodín y onrender
    _hosts_actuales = list(globals().get("ALLOWED_HOSTS", []))
    for h in ["*", "techfactory.onrender.com"]:
        if h not in _hosts_actuales:
            _hosts_actuales.append(h)
    ALLOWED_HOSTS = _hosts_actuales

    # CSRF
    _csrf = list(globals().get("CSRF_TRUSTED_ORIGINS", []))
    if "https://*.onrender.com" not in _csrf:
        _csrf.append("https://*.onrender.com")
    CSRF_TRUSTED_ORIGINS = _csrf

    # Insertar WhiteNoise sin fallar si MIDDLEWARE aún no estaba
    _mw = list(globals().get("MIDDLEWARE", []))
    if "whitenoise.middleware.WhiteNoiseMiddleware" not in _mw:
        try:
            idx = _mw.index("django.middleware.security.SecurityMiddleware")
            _mw.insert(idx + 1, "whitenoise.middleware.WhiteNoiseMiddleware")
        except ValueError:
            _mw = ["django.middleware.security.SecurityMiddleware",
                   "whitenoise.middleware.WhiteNoiseMiddleware"] + _mw
    MIDDLEWARE = _mw

    # Staticfiles en producción
    from pathlib import Path
    BASE_DIR = Path(__file__).resolve().parent.parent
    STATIC_URL = "/static/"
    STATIC_ROOT = BASE_DIR / "staticfiles"
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

    # Base de datos: usa DATABASE_URL si existe, si no, deja tu SQLite
    DATABASES["default"] = dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600,
        ssl_require=False
    )
# --- FIN AÑADIDOS PARA RENDER ---
